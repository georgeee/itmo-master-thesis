\section{Система типов и синтаксис языка Haskell}

TODO описать что используется Haskell версии GHC X.X, что под капотом там такаято система и почему система типов подходит для описания модели криптовалюты; описать основные синтактические конструкции которые в продолжение повествования будут использоваться

TODO типы: Word32, Rec, Semigroup, COnst, NotIntersects

При описании работы с состоянием (в дальнейшем), будут накладываться различные ограничения (требования) на ключ или значение. Для выражения ограничений в нотации будет использоваться конструкция языка Haskell тайп-класс, например:

\begin{code}[language=Haskell,label=lst:constraints-example,caption={Пример наложения ограничений на абстрактные переменные}]
getMonoidValue :: (Ord id, Monoid value)
                 => Prefixed id -> StateP id value -> value
getMonoidValue key stateP = maybe mempty (M.lookup key stateP)
\end{code}

В примере было наложено ограничение `Ord id` на ключ, выражающее требование существования линейного порядка на множестве всех ключей. В сигнатуре функции указано еще одно требование, `Monoid value`, требующее от `value` моноидальную структуру.

\begin{code}[language=Haskell,label=lst:recall,caption={Семейство типов $RecAll$}]
type family RecAll' (rs :: [u]) (c :: u -> Constraint) :: Constraint where
    RecAll' '[] c = ()
    RecAll' (r ': rs) c = (c r, RecAll' rs c)
\end{code}

TODO: что такое тип, вид (как эти понятия используются)

Воспользуемся концепцией свободной монады, определенной в языке Haskell (подробнее с концепцией свободных монад можно ознакомиться в документации к библиотеке free \citep{free-hackage}). Свободная монада определяется следующим типом данных:

\begin{code}[language=Haskell,label=lst:free-monad,caption={Свободная монада}]
data Free f a
  = Pure a
  | Free (f (Free f a))
\end{code}

Тип данных `Free` описывает чистую функцию, которая возвращает либо значение, либо запрос к внешнему контексту.
Тип `Free` определяет два конструктора: `Pure` и `Free`.
Конструктор `Pure` используется для возврата значения, конструктор `Free` для обращения к внешнему контексту с последующим продолжением вычисления.
Переменная типа `f` задаёт конкретный формат обращения к внешнему контексту и обработки результата обращения.

\subsection{Библиотека Vinyl}

\label{ch01-vinyl}
