\section{Делегация доли владения}

\label{ch03-delegation}

Делегация доли владения является важным механизмом в алгоритмах консенсуса, реализующих метод доказательства доли владения. Она предоставляет функционал передачи права выпуска блока от одного участника системы другому, позволяя:

* получателю прав выпускать блоки в тех случаях, когда владелец прав имеет право выпуска блока;
* владельцу прав производить манипуляции с его долей владения без каких-либо ограничений, в том числе повторно передавать право выпуска блока (третьему учаcтнику).

Существует два подхода к реализации делегации, которые ведут к двум различающимся типам делегации: легковесной и тяжеловесной, которые будут рассмотрены в соответствующих подразделах.

\subsection{Легковесная делегация}

Легковесная делегация представляет из себя механизм делегации, не требующих хранения каких-либо дополнительных данных в состоянии системы.
В случае когда один участник сети (делегирующий) имеет намерение передать другому участнику (делегату) право выпуска блока, делегирующий участник создаёт специальный объект -- делегационный сертификат, который хранит внутри себя следующую информацию:

* публичный ключ делегирующего;
* публичный ключ делегата;
* значение целочисленного счётчика;
* подпись пары из публичного ключа делегата и значения счётчика ключом делегирующего.

Делегирующий каким-либо образом передаёт сертификат делегату. Когда делегат выпускает блок, используя право выпуска блока делегирующего, делегат вкладывает в доказательство блока сертификат. Участники, проверяющие блок, должны проверить подпись сертификата делегирующим, проверить корректность значения счётчика.

На значение счётчика накладываются следующие ограничения:

* начальное значение счётчика для ключа делегирующего равно $0$;
* каждый последующий сертификат, созданный делегирующим, должен содержать значение счётчика, большее известного на текущий момент системе;
* блок считается некорректным, если к нему приложен сертификат, значение счётчика которого меньше наибольшего использованного в ранее принятых блоках;
* правило сравнения двух цепей должно быть модифицировано таким образом, что если две цепи различаются только последним блоком, оба последних блока созданы с помощью сертификатов, выпущенных одним делегирующим участником, то предпочтение отдаётся блоку с большим значением счётика.

В листинге \ref{lst:light-dlg} показана реализации легковесной делегации. Для этого модифицируется конфигурация обобщенного функционала PoS (функция `lightDlgStakeConf`): создатель блока имеет право выпуска блока в том числе если к блоку приложен сертификат, в котором он выступает делегатом, а делегирующий имеет право выпуска блока. Также модифицируется правило выьора цепи (функция `lightDlgChainComparator`).

\begin{code}[language=Haskell,label=lst:light-dlg,caption={Функционал легковесной делегации}]
data LightDlgCert stId signature =
  LightDlgCert
    { ldcIssuer    :: stId
    , ldcSignature :: signature
    , ldcCounter :: Int
    }

data LightDlgSTag
type LightDlgKV stId = '( stId, Int )

newtype LightDlgToSign stId = LightDlgToSign stId

data LightDlgError stId signature
    = LightDlgCorruptedCert (LightDlgCert stId signature)

lightDlgStakeConf
  :: ( Ord stId
     , Signed stId signature (LightDlgToSign stId)
     , HasPrism proof (LightDlgCert stId signature)
     , HasException e (LightDlgError stId signature)
     , HasCap (StateTag LightDlgSTag) rs
     )
  => Proxy (stId, signature)
  -> StakeConfiguration e mw rs proof stId
  -> StakeConfiguration e mw rs proof stId
lightDlgStakeConf = (..)

lightDlgChainComparator
  :: HasPrism header (LightDlgCert stId signature)
  => ChainComparator header
  -> ChainComparator header
lightDlgChainComparator = (..)
\end{code}

\subsection{Тяжеловесная делегация}
\subsection{Комбинация двух видов делегаций}

Для реализации блокчейн-системы с функциональностью делегации наиболее целесообразно использовать комбинацию двух типов делегации. Легковесная делегация удобна для оперативного менеджмента ключей: замена одного ключа другим производится мгновенно, не налагая дополнительных требований на другие части системы.
Тяжеловесная делегация предоставляет функционал, который отсуствует в легковесной (многоуровневая делегация, согласованность, доступ к информации о делегации для всех участников сети),
однако не позволяя решение задачи оперативного менеджмента ключей (смена делегации требует принятия в блок специальной транзакции, достижения консенсуса об этом блоке участниками сети).

Предлагаемая схема проиллюстрирована на рисунке \ref{img:delegation-both} (легковесная делегация обозначена пунктирной стрелкой): на узлах, выпускающие блоки, сохраняется ключ `hotKey`. Выпускается соответствующий легковесный сертификат, делегирующий право выпуска блока с ключа `coldKey` на ключ `hotKey`. Ключ `coldKey` может храниться в некотором закрытом хранилище и использоваться только при необходимости сменить `hotKey`. В то же время `coldKey` может выступать ключом, на который проихводится делегация тяжеловесного типа с других ключей (кол-во
уровней делегации ограничено только параметром `maxDlgHeight`).

\image{delegation-both}{Комбинация легковесной и тяжеловесной делегаций}
